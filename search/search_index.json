{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Toon Deobfuscated, your central hub for documentation and tooling for the Eneco Toon thermostats, also known as Engie Electrabel Boxx and Viesgo Toon in other countries. This device was originally developed by Quby, a Dutch company specializing in smart home technology. They ultimately got acquired by Eneco.</p> <p>This documentation is aimed at providing comprehensive information about the Toon thermostat's internal workings. The core audience includes developers, engineers, and enthusiasts interested in understanding and potentially contributing to the community-run ecosystem surrounding the Toon thermostat.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>The official Toon thermostat platform has proven to be a useful tool for managing home heating and energy consumption.</p> <p>In terms of hardware, even the oldest models are still very capable, offering features like Z-Wave, Thermostat interface and a large touchscreen, and a processor that can run a Linux distribution. However, older models no longer receive updates, and official support has been discontinued.</p> <p>In terms of repurposing, there is a great community of developers still working on extending the functionality of the Toon thermostat, even to this day.</p> <p>However, as time goes by, the community tools have gone stale, links no longer always work, and documentation is outdated. It also depends on Eneco / Quby's official infrastructure, which will eventually be shut down.</p>"},{"location":"#goals","title":"Goals","text":"<p>The goal of this documentation is to provide a comprehensive and up-to-date resource for anyone seeking to repurpose the Toon thermostat. This documentation is compiled from various sources, including community contributions, official documentation, and reverse engineering efforts.</p>"},{"location":"#early-stages","title":"Early stages","text":"<p>This documentation is currently in its early stages. We are actively working on expanding the content to cover various aspects of the Toon thermostat.</p> <p>Initially, this documentation will mostly focus on the now-defunct Toon v1, but as there are commonalities with the Toon v2, we will also include information about the newer model where relevant.</p> <p>This will likely be expanded when the Toon v2 will become defunct as well.</p>"},{"location":"hardware/","title":"Toon 1","text":"<p>Specifications:</p> <ul> <li>ARM926EJ-S single-core CPU at 400 MHz</li> <li>128 MB RAM</li> <li>128 MB NAND flash storage</li> <li>Ethernet, WiFi, Z-wave, USB2, OpenTherm interfaces</li> <li>800x480 display with touch</li> <li>Temperature sensor</li> </ul> <p>More information</p>"},{"location":"hardware/#toon-2","title":"Toon 2","text":"<p>Specifications:</p> <ul> <li>NXP iMX6SX CPU</li> <li>1x Cortex-A9 core at up to 1 GHz</li> <li>1x Cortex-M4 core at up to 200 MHz</li> <li>4GB DDR3 RAM</li> <li>4GB flash storage</li> <li>WiFi, Bluetooth, Z-Wave, Zigbee, USB2, OpenTherm interfaces</li> <li>1024x600 display with touch</li> <li>Ultrasonic, light, air quality, humidity/temperature sensors</li> </ul> <p>More information</p>"},{"location":"hardware/toonv1/","title":"Toon v1 - hardware specifications","text":""},{"location":"hardware/toonv1/#soc","title":"SoC","text":"<p>NXP MCIMX27LMOP4A</p> <ul> <li>CPU: ARM926EJ-S</li> <li>Speed: 400 MHz</li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#memory","title":"Memory","text":"<p>NANYA NT6DM32M32BC-T1</p> <ul> <li>Size: 128 MiB</li> <li>Type: DDR</li> <li>Speed: 200MHz</li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#storage","title":"Storage","text":"<p>Samsung K9F1G08U0D</p> <ul> <li>Size: 128 MiB</li> <li>Type: NAND Flash</li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#partition-table","title":"Partition table","text":"# size label notes 0 1MiB <code>u-boot</code> Bootloader; not mapped in Linux 1 512KiB <code>u-boot-env</code> U-Boot environment variables 2 1536KiB <code>splash-image</code> Boot splash screen 3 3MiB <code>kernel</code> Linux kernel 4 3MiB <code>kernel-backup</code> Backup Linux kernel 5 119MiB <code>rootfs</code> Main root filesystem"},{"location":"hardware/toonv1/#display","title":"Display","text":"<p>Tianma TM070RDH03</p> <ul> <li>Size: 7 inch</li> <li>Resolution: 800x480 (WVGA), 134PPI, 16:9 aspect ratio</li> <li>Type: TFT LCD</li> <li>Touch: 4-wire resistive touch screen (see below for controller details)</li> </ul> <p>No datasheet found.</p>"},{"location":"hardware/toonv1/#interfaces","title":"Interfaces","text":""},{"location":"hardware/toonv1/#ethernet","title":"Ethernet","text":"<ul> <li>10/100 Mbps Ethernet port</li> <li>Embedded, on-SoC PHY (Freescale Fast Ethernet Controller)</li> </ul> <p>See the SoC's datasheet for more information.</p>"},{"location":"hardware/toonv1/#wifi","title":"WiFi","text":"<p>AzureWave AW-NU168H</p> <ul> <li>Mini PCIe module</li> <li>Ralink RT5390 802.11b/g/n chip</li> <li>Connected via internal USB2 interface (see USB2 section below).</li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#z-wave","title":"Z-wave","text":"<p>Sigma designs ZW0301 Z-Wave controller</p> <p>Datasheet</p> <p>The Z-Wave controller is connected to the SoC via UART2 (ttymxc2), which is used for communication with the Z-Wave controller. The Z-Wave controller also has a serial EEPROM connected to it, which is used for data storage.</p>"},{"location":"hardware/toonv1/#serial-eeprom","title":"Serial EEPROM","text":"<p>Atmel <code>ATMLH402</code> (as marked on chip)</p> <ul> <li>SPI serial EEPROM</li> <li>256 Kbit (32 KiB x 8 bits)</li> <li>Address: spi0.0</li> <li>Linux driver: <code>at25</code></li> </ul> <p>This EEPROM is likely not supposed to be accessed directly, but rather through the Z-Wave controller's interface. However, the SPI bus is accessible from Linux, and the EEPROM can be accessed directly.</p> <p>Datasheet of a compatible part.</p>"},{"location":"hardware/toonv1/#usb2","title":"USB2","text":"<p>Microchip USB3370 (x2)</p> <ul> <li>Enhanced Single Supply Hi-Speed USB ULPI Transceiver (USB PHY)</li> <li>Used to connect the USB port and the Wi-Fi module</li> <li>Connected to the SoC's USB2 ULPI interface</li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#opentherm-power-port","title":"OpenTherm / power port","text":"<p>Toon v1 has a 2-pin port on its back which is used to connect the Toon to a central heating system or boiler, as well as to provide power.</p> <p>The pins match up with a connector embedded in the wall mount.</p> <p>OpenTherm communications are done through UART1 (ttymxc1), at 4800,8n1.</p>"},{"location":"hardware/toonv1/#ketelmodule","title":"Ketelmodule","text":"<p>Commonly, the wall mount connector is connected to a Ketelmodule (boiler module). This module is a separate device, and allows the Toon to communicate with the boiler as well as provide adequate power to the Toon.</p> <p>This module is not required for the Toon to function. You can also connect the wall mount connector directly to 24V DC power, and use the Toon without OpenTherm functionality.</p> <p>The Toon will sort out polarity fully automatically, so it does not matter which pin is connected to which wire.</p>"},{"location":"hardware/toonv1/#jtag-header","title":"JTAG header","text":"<p>The Toon v1 PCB has a 14-pin JTAG header. The kind folks at Quby have even populated the header with pins, which makes it super easy to connect a JTAG debugger or Raspberry Pi.</p> <p>Its pinout is as follows:</p> Pin Signal Description 1 RTCK Return clock signal 2 TRST Test reset 3 GND Ground 4 TCK Test clock 5 GND Ground 6 TMS Test mode select 7 SRST System reset 8 TDI Test data in 9 Vt ? 10 TDO Test data out 11 RxD UART Receive data 12 (NC) Not connected 13 TxD UART Transmit data 14 GND Ground <ul> <li>Pin 1 is the top left pin when orienting the PCB with the ethernet port at the bottom left.</li> <li>Pin 2 is the top right pin.</li> <li>The TxD and RxD pins are connected to UART0 (ttymxc0), which is used for console output by U-Boot and Linux.</li> </ul> <pre><code>          1___\nRTCK 01 - |.|.| - 02 TRST\n GND 03 - |.|.| - 04 TCK\n GND 05 - |.|.| - 06 TMS\nSRST 07 - |.|.| - 08 TDI\n  Vt 09 - |.|.| - 10 TDO\n RxD 11 - |.|.| - 12 NC\n TxD 13 - |.|.| - 14 GND\n</code></pre>"},{"location":"hardware/toonv1/#sensors","title":"Sensors","text":""},{"location":"hardware/toonv1/#temperature-sensor","title":"temperature sensor","text":"<p>Analog Devices ADT7410</p> <ul> <li>I2C temperature sensor</li> <li>Accuracy: \u00b10.5\u00b0C from -40\u00b0C to +105\u00b0C</li> <li>16-bit resolution (~0.0078\u00b0C)</li> <li>Address: 0x49 @ i2c-0</li> <li>Linux driver: <code>adt7410</code></li> </ul> <p>Note: the ATD7410 would normally reside on 0x48, and while there is a driver configured for this address, it does not appear to work.</p> <p>Potentially, the device was (planned to be) moved to 0x48 on later hardware revisions, or perhaps dual sensors were planned.</p> <p>The software on Toon v1 also appears to apply some offset to the measured temperature value.</p> <p>Datasheet</p>"},{"location":"hardware/toonv1/#defunct-temperature-sensor","title":"(defunct?) temperature sensor","text":"<p>Unknown device</p> <ul> <li>I2C temperature sensor</li> <li>Address: 0x4c @ i2c-0</li> <li>Linux driver: <code>tmp431</code></li> </ul> <p>Does not appear to work, and is likely a leftover from an earlier hardware revision. The driver is configured for this address, but the device does not respond to any commands.</p>"},{"location":"hardware/toonv1/#other-ics-of-interest","title":"Other ICs of interest","text":""},{"location":"hardware/toonv1/#real-time-clock","title":"Real-time clock","text":"<p>Renesas ISL1208</p> <ul> <li>I2C real-time clock</li> <li>Address: 0x6f @ i2c-1</li> <li>Linux driver: <code>isl1208</code></li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#touch-controller","title":"Touch controller","text":"<p>Texas Instruments TSC2007</p> <ul> <li>I2C interface</li> <li>4-wire resistive touch</li> <li>Address: 0x48 @ i2c-1</li> <li>Linux driver: <code>tsc2007</code></li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#audio-codec-dsp-amplifier","title":"Audio codec + DSP + amplifier","text":"<p>Texas Instruments TLV320AIC3111</p> <ul> <li>Stereo audio codec</li> <li>I2C interface</li> <li>Address: 0x18 @ i2c-0</li> <li>Linux driver: <code>tlv320aic3111</code></li> </ul> <p>Datasheet</p>"},{"location":"hardware/toonv1/#mechanical-aspects","title":"Mechanical aspects","text":"<p>Toon v1 has 5 main components:</p> <ol> <li>The PCB, which contains the SoC, memory, storage, etc.</li> <li>The display, which is a 7-inch touchscreen.</li> <li>The front bezel, which holds the display in place.</li> <li>The enclosure, which houses the PCB and display.</li> <li>The wall mount, which provides power and connectivity to the Toon.</li> </ol> <p>None of the components are screwed or glued; instead they are all clipped together.</p>"},{"location":"hardware/toonv1/#enclosure","title":"Enclosure","text":"<p>The enclosure is made of plastic and has a matte finish. It has cutouts for the display, ethernet port, USB port, reset button and power / OpenTherm port, as well as small slots for ventilation in the top back.</p> <p>The front bezel can easily be removed by gently prying it off the main body. There are two clips per side. Unfortunately, these clips are somewhat fragile, and not designed to be removed and reattached multiple times.</p>"},{"location":"hardware/toonv1/#display_1","title":"Display","text":"<p>The display is connected to the PCB via a 40-pin FPC connector as well as a small connector for the touchscreen.</p> <p>These connectors can be accessed by carefully tilting the display downward.</p> <p>Both connectors can be unplugged by gently prying open the connector's locking mechanism.</p>"},{"location":"hardware/toonv1/#pcb","title":"PCB","text":"<p>The PCB is clipped into the enclosure with 6 clips; one in each corner and two surrounding the OpenTherm port. These clips are quite fragile, and break off easily. Do not use anything thicker than a piece of paper to pry the clips off, as bending them too far will break the clips.</p> <p>The PCB is a multi-layer board that contains all the electronic components of the Toon. It was designed to be compact and efficient, with a focus on low power consumption.</p> <p>The PCB has several connectors for the various interfaces, including Ethernet, USB, and OpenTherm. It also has a JTAG header for debugging and programming.</p> <p>The single button on the PCB is used for (hard) rebooting the Toon.</p>"},{"location":"hardware/toonv2/","title":"Toon v2","text":""},{"location":"hardware/toonv2/#hardware-specifications","title":"Hardware specifications","text":"<ul> <li>CPU: Freescale (NXP) iMX6SX</li> <li>1x Cortex-A9 core at up to 1 GHz</li> <li>1x Cortex-M4 core at up to 200 MHz</li> <li>RAM: 4GB DDR3, Samsung K4B2G1646F BCK0 (2x)</li> <li>Flash: Samsung KLM4G1FEPD (4GiB)</li> <li>Z-Wave controller, Sigma designs SD3502</li> <li>WiFi/Bluetooth: Murata 1LN -- note: are we sure about this?</li> <li>Power control: Freescale (NXP) PF3000</li> <li>Zigbee chipset: GreenPeak GP711</li> <li>Realtime clock: Ambiq micro AM0805</li> <li>Ultrasonic sensor: Murata A6Z</li> <li>Buzzer: OEM SFM-1224B03</li> <li>Light sensor: Lite-on LTR-303ALS-01</li> <li>Air quality sensor: CCS (now Ams) CCS801</li> <li>Humidity/temp sensor: Ams ENS210 (2x)</li> </ul>"}]}